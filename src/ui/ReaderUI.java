package ui;

import dao.ReaderDAO;
import model.Reader;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import java.util.List;

import static ui.UiStyles.*;
import static ui.LibraryFrame.simpleChange;

public class ReaderUI extends JPanel {
    private final ReaderDAO readerDAO = new ReaderDAO();
    private final LibraryFrame parentFrame;

    public ReaderUI(LibraryFrame parentFrame) {
        this.parentFrame = parentFrame;
        setLayout(new BorderLayout(0, 12));
        setOpaque(false);
        buildReaderPanel();
    }

    private void buildReaderPanel() {
        // L·∫•y to√†n b·ªô logic t·ª´ buildReaders() c·ªßa LibraryFrame c≈©

        // ======= THANH T√åM KI·∫æM + N√öT TH√äM =======
        JTextField search = new JTextField();
        search.putClientProperty("JTextField.placeholderText",
                "T√¨m ki·∫øm theo t√™n, m√£ ƒë·ªôc gi·∫£, ƒëi·ªán tho·∫°i ho·∫∑c email...");

        JButton add = new JButton("+ Th√™m ƒë·ªôc gi·∫£");
        add.setBackground(PRIMARY);
        add.setForeground(Color.WHITE);

        JButton edit = new JButton("‚úèÔ∏è C·∫≠p nh·∫≠t ƒë·ªôc gi·∫£");
        edit.setBackground(new Color(255, 180, 0));
        edit.setForeground(Color.WHITE);

        JButton delete = new JButton("üóë X√≥a ƒë·ªôc gi·∫£");
        delete.setBackground(Color.RED);
        delete.setForeground(Color.WHITE);

        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 8, 0));
        btnPanel.add(add);
        btnPanel.add(delete);
        btnPanel.add(edit);

        JPanel top = new JPanel(new BorderLayout(8, 0));
        top.add(search, BorderLayout.CENTER);
        top.add(btnPanel, BorderLayout.EAST);
        add(top, BorderLayout.NORTH);


        // ======= C·∫§U H√åNH C√ÅC C·ªòT =======
        String[] cols = {"M√£ ƒë·ªôc gi·∫£", "T√™n", "Email", "ƒêi·ªán tho·∫°i", "ƒê·ªãa ch·ªâ", "Ng√†y tham gia", "Tr·∫°ng th√°i"};
        JTable table = new JTable(new javax.swing.table.DefaultTableModel(cols, 0));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setAutoCreateRowSorter(true);

        // ======= C·∫§U H√åNH ƒê·ªò R·ªòNG C·ªòT =======
        table.getColumnModel().getColumn(0).setPreferredWidth(90);   // M√£ ƒë·ªôc gi·∫£
        table.getColumnModel().getColumn(1).setPreferredWidth(180);  // T√™n
        table.getColumnModel().getColumn(2).setPreferredWidth(200);  // Email
        table.getColumnModel().getColumn(3).setPreferredWidth(120);  // ƒêi·ªán tho·∫°i
        table.getColumnModel().getColumn(4).setPreferredWidth(250);  // ƒê·ªãa ch·ªâ
        table.getColumnModel().getColumn(5).setPreferredWidth(120);  // Ng√†y tham gia
        table.getColumnModel().getColumn(6).setPreferredWidth(90);   // Tr·∫°ng th√°i (Ho·∫°t ƒë·ªông / Ng∆∞ng)

        table.setRowHeight(26);
        table.setFillsViewportHeight(true);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // ======= N·∫†P D·ªÆ LI·ªÜU T·ª™ DATABASE =======
        Runnable reload = () -> {
            javax.swing.table.DefaultTableModel model =
                    (javax.swing.table.DefaultTableModel) table.getModel();
            model.setRowCount(0);

            List<Reader> readers = readerDAO.searchReaders(search.getText());
            for (Reader r : readers) {
                model.addRow(new Object[]{
                        r.getReaderID(),
                        r.getName(),
                        r.getEmail(),
                        r.getPhone(),
                        r.getAddress(),
                        r.getJoinDate(),
                        r.isActive() ? "Ho·∫°t ƒë·ªông" : "Ng∆∞ng"
                });
            }
        };
        search.getDocument().addDocumentListener(simpleChange(reload));

        // ======= N√öT TH√äM M·ªöI =======
        add.addActionListener(e -> {
            JTextField nameField = new JTextField();
            JTextField emailField = new JTextField();
            JTextField phoneField = new JTextField();
            JTextField addressField = new JTextField();
            JCheckBox activeCheck = new JCheckBox("Ho·∫°t ƒë·ªông", true);

            JPanel panel = new JPanel(new GridLayout(0, 2, 6, 6));
            panel.add(new JLabel("T√™n ƒë·ªôc gi·∫£:"));
            panel.add(nameField);
            panel.add(new JLabel("Email:"));
            panel.add(emailField);
            panel.add(new JLabel("S·ªë ƒëi·ªán tho·∫°i:"));
            panel.add(phoneField);
            panel.add(new JLabel("ƒê·ªãa ch·ªâ:"));
            panel.add(addressField);
            panel.add(new JLabel("Tr·∫°ng th√°i:"));
            panel.add(activeCheck);

            int result = JOptionPane.showConfirmDialog(
                    null,
                    panel,
                    "Th√™m ƒë·ªôc gi·∫£ m·ªõi",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE
            );

            if (result == JOptionPane.OK_OPTION) {
                try {
                    Reader r = new Reader();
                    r.setName(nameField.getText().trim());
                    r.setEmail(emailField.getText().trim());
                    r.setPhone(phoneField.getText().trim());
                    r.setAddress(addressField.getText().trim());
                    r.setJoinDate(LocalDate.now());
                    r.setActive(activeCheck.isSelected());

                    if (r.getName().isEmpty()) {
                        throw new Exception("T√™n ƒë·ªôc gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                    }

                    readerDAO.addReader(r);
                    reload.run();
                    parentFrame.refreshAll(); // G·ªçi refreshAll()
                    JOptionPane.showMessageDialog(null, "‚úÖ Th√™m ƒë·ªôc gi·∫£ th√†nh c√¥ng!");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "‚ùå L·ªói khi th√™m ƒë·ªôc gi·∫£: " + ex.getMessage());
                }
            }
        });
        // ========== X√ìA ƒê·ªòC GI·∫¢ ==========
        delete.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ƒë·ªôc gi·∫£ ƒë·ªÉ x√≥a!");
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªôc gi·∫£ n√†y?",
                    "X√°c nh·∫≠n x√≥a",
                    JOptionPane.YES_NO_OPTION
            );
            if (confirm != JOptionPane.YES_OPTION) return;

            // L·∫•y ID ƒë·ªôc gi·∫£
            int readerId = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());

            // X√≥a trong database
            readerDAO.deleteReader(readerId);

            // L√†m m·ªõi giao di·ªán
            reload.run();
            parentFrame.refreshAll(); // G·ªçi refreshAll()

            JOptionPane.showMessageDialog(this, "ƒê√£ x√≥a ƒë·ªôc gi·∫£ th√†nh c√¥ng!");
        });
        // C·∫¨P NH·∫¨T ƒê·ªòC GI·∫¢
        edit.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn ƒë·ªôc gi·∫£ ƒë·ªÉ c·∫≠p nh·∫≠t!");
                return;
            }

            // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ JTable
            int id = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
            String name = table.getValueAt(selectedRow, 1).toString();
            String email = table.getValueAt(selectedRow, 2).toString();
            String phone = table.getValueAt(selectedRow, 3).toString();
            String address = table.getValueAt(selectedRow, 4).toString();
            // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i (c·ªôt 6) v√† chuy·ªÉn v·ªÅ boolean
            boolean isActive = table.getValueAt(selectedRow, 6).toString().equals("Ho·∫°t ƒë·ªông");


            // Hi·ªÉn th·ªã h·ªôp tho·∫°i cho ng∆∞·ªùi d√πng ch·ªânh s·ª≠a
            String newName = JOptionPane.showInputDialog(this, "H·ªç t√™n:", name);
            if (newName == null) return;

            String newEmail = JOptionPane.showInputDialog(this, "Email:", email);
            if (newEmail == null) return;

            String newPhone = JOptionPane.showInputDialog(this, "S·ªë ƒëi·ªán tho·∫°i:", phone);
            if (newPhone == null) return;

            String newAddress = JOptionPane.showInputDialog(this, "ƒê·ªãa ch·ªâ:", address);
            if (newAddress == null) return;

            int confirm = JOptionPane.showConfirmDialog(this,
                    "ƒê·ªôc gi·∫£ ƒëang ho·∫°t ƒë·ªông?",
                    "Tr·∫°ng th√°i ho·∫°t ƒë·ªông",
                    isActive ? JOptionPane.YES_NO_OPTION : JOptionPane.NO_OPTION, // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i hi·ªán t·∫°i
                    JOptionPane.QUESTION_MESSAGE);
            boolean newActive = (confirm == JOptionPane.YES_OPTION);

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Reader m·ªõi
            Reader r = new Reader();
            r.setReaderID(id);
            r.setName(newName);
            r.setEmail(newEmail);
            r.setPhone(newPhone);
            r.setAddress(newAddress);
            r.setActive(newActive);

            // G·ªçi DAO ƒë·ªÉ c·∫≠p nh·∫≠t
            readerDAO.updateReader(r);

            reload.run();
            parentFrame.refreshAll(); // G·ªçi refreshAll()

            JOptionPane.showMessageDialog(this, "‚úÖ C·∫≠p nh·∫≠t ƒë·ªôc gi·∫£ th√†nh c√¥ng!");
        });


        reload.run(); // N·∫°p d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
    }
}